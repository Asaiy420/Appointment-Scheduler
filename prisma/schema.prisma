// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String     @id @default(uuid())
  name           String?
  email          String     @unique
  password       String
  role           Role       @default(PATIENT)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  patient        Patient?
  doctor         Doctor?
  doctorApplication DoctorApplication?

  }


model Patient {
  id             String     @id       @default(uuid())
  userId         String     @unique
  user           User       @relation(fields: [userId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  appointments Appointment[]
}


model Doctor {
  id                String     @id       @default(uuid())
  specialization    String
  experienceYears   String
  userId            String     @unique
  user              User       @relation(fields: [userId], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  appointments      Appointment[]
} 
model DoctorApplication {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  specialization  String
  experienceYears String
  status          ApplicationStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  reviewedAt      DateTime?
}


model Appointment {
  id                String         @id                  @default(uuid())
  status            Status         @default(PENDING)
  appointmentDate   DateTime
  patientId         String
  doctorId          String
  patient           Patient        @relation(fields: [patientId], references: [id])
  doctor            Doctor         @relation(fields: [doctorId], references: [id])
  updatedAt         DateTime       @updatedAt
  createdAt         DateTime       @default(now())


}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
}
enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}
